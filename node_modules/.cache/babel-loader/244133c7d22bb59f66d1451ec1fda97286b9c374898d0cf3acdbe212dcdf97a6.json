{"ast":null,"code":"import { fetchIngredients } from \"./ingredientQuery\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  ingredients: [],\n  isLoding: false,\n  error: \" \"\n};\nconst burgerIngredientsSlice = createSlice({\n  name: \"ingredients\",\n  initialState,\n  extraReducers: builder => {\n    builder\n    // Add reducers for additional action types here, and handle loading state as needed\n    .addCase(fetchIngredients.pending.type, state => {\n      state.isLoding = false;\n      state.error = \" \";\n    }).addCase(fetchIngredients.fulfilled.type, (state, action) => {\n      state.isLoding = true;\n      state.error = \" \";\n      state.ingredients = action.payload.data;\n    }).addCase(fetchIngredients.rejected.type, (state, action) => {\n      state.isLoding = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  ingredientsUploading,\n  ingredientsUpload,\n  ingredientsUploadError\n} = burgerIngredientsSlice.actions;\nexport default burgerIngredientsSlice.reducer;","map":{"version":3,"names":["fetchIngredients","createSlice","initialState","ingredients","isLoding","error","burgerIngredientsSlice","name","extraReducers","builder","addCase","pending","type","state","fulfilled","action","payload","data","rejected","ingredientsUploading","ingredientsUpload","ingredientsUploadError","actions","reducer"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/services/store/reducers/burgerIngredientsSlice.ts"],"sourcesContent":["import { fetchIngredients } from \"./ingredientQuery\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  ingredients: [],\r\n  isLoding: false,\r\n  error: \" \",\r\n};\r\n\r\nconst burgerIngredientsSlice = createSlice({\r\n  name: \"ingredients\",\r\n  initialState,\r\n  \r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Add reducers for additional action types here, and handle loading state as needed\r\n      .addCase(fetchIngredients.pending.type, (state) => {\r\n        state.isLoding = false;\r\n        state.error = \" \";\r\n      })\r\n\r\n      .addCase(fetchIngredients.fulfilled.type, (state, action) => {\r\n        state.isLoding = true;\r\n        state.error = \" \";\r\n        state.ingredients = action.payload.data;\r\n      })\r\n\r\n      .addCase(fetchIngredients.rejected.type, (state, action) => {\r\n        state.isLoding = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  ingredientsUploading,\r\n  ingredientsUpload,\r\n  ingredientsUploadError,\r\n} = burgerIngredientsSlice.actions;\r\nexport default burgerIngredientsSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,sBAAsB,GAAGL,WAAW,CAAC;EACzCM,IAAI,EAAE,aAAa;EACnBL,YAAY;EAGZM,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACV,gBAAgB,CAACW,OAAO,CAACC,IAAI,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACT,QAAQ,GAAG,KAAK;MACtBS,KAAK,CAACR,KAAK,GAAG,GAAG;IACnB,CAAC,CAAC,CAEDK,OAAO,CAACV,gBAAgB,CAACc,SAAS,CAACF,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAACT,QAAQ,GAAG,IAAI;MACrBS,KAAK,CAACR,KAAK,GAAG,GAAG;MACjBQ,KAAK,CAACV,WAAW,GAAGY,MAAM,CAACC,OAAO,CAACC,IAAI;IACzC,CAAC,CAAC,CAEDP,OAAO,CAACV,gBAAgB,CAACkB,QAAQ,CAACN,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACT,QAAQ,GAAG,KAAK;MACtBS,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXG,oBAAoB;EACpBC,iBAAiB;EACjBC;AACF,CAAC,GAAGf,sBAAsB,CAACgB,OAAO;AAClC,eAAehB,sBAAsB,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}