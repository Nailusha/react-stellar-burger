{"ast":null,"code":"import { fetchIngridients } from \"./ingridientQuery\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  ingredients: [],\n  isLoding: false,\n  error: \" \"\n};\nconst burgerIngridientsSlice = createSlice({\n  name: \"ingridients\",\n  initialState,\n  extraReducers: builder => {\n    builder\n    // Add reducers for additional action types here, and handle loading state as needed\n    .addCase(fetchIngridients.pending.type, state => {\n      state.isLoding = false;\n      state.error = \" \";\n    }).addCase(fetchIngridients.fulfilled.type, (state, action) => {\n      state.isLoding = true;\n      state.error = \" \";\n      state.ingridients = action.payload.data;\n    }).addCase(fetchIngridients.rejected.type, (state, action) => {\n      state.isLoding = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  ingridientsUploading,\n  ingridientsUpload,\n  ingridientsUploadError\n} = burgerIngridientsSlice.actions;\nexport default burgerIngridientsSlice.reducer;","map":{"version":3,"names":["fetchIngridients","createSlice","initialState","ingredients","isLoding","error","burgerIngridientsSlice","name","extraReducers","builder","addCase","pending","type","state","fulfilled","action","ingridients","payload","data","rejected","ingridientsUploading","ingridientsUpload","ingridientsUploadError","actions","reducer"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/components/services/store/reducers/burgerIngridientsSlice.js"],"sourcesContent":["import { fetchIngridients } from \"./ingridientQuery\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  ingredients: [],\r\n  isLoding: false,\r\n  error: \" \",\r\n};\r\n\r\nconst burgerIngridientsSlice = createSlice({\r\n  name: \"ingridients\",\r\n  initialState,\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Add reducers for additional action types here, and handle loading state as needed\r\n      .addCase(fetchIngridients.pending.type, (state) => {\r\n        state.isLoding = false;\r\n        state.error = \" \";\r\n      })\r\n\r\n      .addCase(fetchIngridients.fulfilled.type, (state, action) => {\r\n        state.isLoding = true;\r\n        state.error = \" \";\r\n        state.ingridients = action.payload.data;\r\n      })\r\n\r\n      .addCase(fetchIngridients.rejected.type, (state, action) => {\r\n        state.isLoding = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  ingridientsUploading,\r\n  ingridientsUpload,\r\n  ingridientsUploadError,\r\n} = burgerIngridientsSlice.actions;\r\nexport default burgerIngridientsSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,sBAAsB,GAAGL,WAAW,CAAC;EACzCM,IAAI,EAAE,aAAa;EACnBL,YAAY;EAEZM,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACV,gBAAgB,CAACW,OAAO,CAACC,IAAI,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACT,QAAQ,GAAG,KAAK;MACtBS,KAAK,CAACR,KAAK,GAAG,GAAG;IACnB,CAAC,CAAC,CAEDK,OAAO,CAACV,gBAAgB,CAACc,SAAS,CAACF,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAM,KAAK;MAC3DF,KAAK,CAACT,QAAQ,GAAG,IAAI;MACrBS,KAAK,CAACR,KAAK,GAAG,GAAG;MACjBQ,KAAK,CAACG,WAAW,GAAGD,MAAM,CAACE,OAAO,CAACC,IAAI;IACzC,CAAC,CAAC,CAEDR,OAAO,CAACV,gBAAgB,CAACmB,QAAQ,CAACP,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACT,QAAQ,GAAG,KAAK;MACtBS,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXG,oBAAoB;EACpBC,iBAAiB;EACjBC;AACF,CAAC,GAAGhB,sBAAsB,CAACiB,OAAO;AAClC,eAAejB,sBAAsB,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}