{"ast":null,"code":"import { useDispatch, useSelector } from 'react-redux';\nexport const useAppDispatch = useDispatch;\nexport const useAppSelector = useSelector;\n\n/*\r\nexport const useWebSocket = () => {\r\n  const webSocket = useRef<WebSocket | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const connect = (url: string) => {\r\n    webSocket.current = new WebSocket(url);\r\n\r\n    webSocket.current.onopen = (e: Event) => {\r\n      dispatch(wsConnecting());\r\n    };\r\n\r\n    webSocket.current.onmessage = (e: MessageEvent<string>) => {\r\n      const message = JSON.parse(e.data);\r\n      if (message.success) {\r\n        dispatch(wsMessage(message));\r\n      } else {\r\n      }\r\n\r\n    };\r\n\r\n    webSocket.current.onerror = (e: Event) => {\r\n      dispatch(wsConnecting(false));\r\n      console.log(e);\r\n    };\r\n\r\n    webSocket.current.onclose = (e: CloseEvent) => {\r\n      if(e.wasClean) {\r\n        dispatch(wsActions.setWSMessage(null));\r\n      }\r\n      dispatch(wsActions.setWsConnected(false));\r\n    };\r\n  };\r\n\r\n  const closeWs = () => {\r\n    ws.current?.close();\r\n  };\r\n\r\n  return { connect, closeWs };\r\n}; */","map":{"version":3,"names":["useDispatch","useSelector","useAppDispatch","useAppSelector"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/services/hooks/hooks.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { AppDispatch, DispatchFunc, RootState } from '../../utils/types'\r\nimport { useRef } from 'react';\r\nimport { wsConnecting, wsMessage } from '../store/reducers/socket/actions';\r\n\r\n\r\n\r\nexport const useAppDispatch: DispatchFunc = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\n\r\n/*\r\nexport const useWebSocket = () => {\r\n  const webSocket = useRef<WebSocket | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const connect = (url: string) => {\r\n    webSocket.current = new WebSocket(url);\r\n\r\n    webSocket.current.onopen = (e: Event) => {\r\n      dispatch(wsConnecting());\r\n    };\r\n\r\n    webSocket.current.onmessage = (e: MessageEvent<string>) => {\r\n      const message = JSON.parse(e.data);\r\n      if (message.success) {\r\n        dispatch(wsMessage(message));\r\n      } else {\r\n      }\r\n\r\n    };\r\n\r\n    webSocket.current.onerror = (e: Event) => {\r\n      dispatch(wsConnecting(false));\r\n      console.log(e);\r\n    };\r\n\r\n    webSocket.current.onclose = (e: CloseEvent) => {\r\n      if(e.wasClean) {\r\n        dispatch(wsActions.setWSMessage(null));\r\n      }\r\n      dispatch(wsActions.setWsConnected(false));\r\n    };\r\n  };\r\n\r\n  const closeWs = () => {\r\n    ws.current?.close();\r\n  };\r\n\r\n  return { connect, closeWs };\r\n}; */"],"mappings":"AAAA,SAA+BA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAO5E,OAAO,MAAMC,cAA4B,GAAGF,WAAW;AACvD,OAAO,MAAMG,cAA+C,GAAGF,WAAW;;AAG1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}