{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setAuthChecked, setUser } from \"../reportWebVitals\";\nexport const BASE_URL = \"https://norma.nomoreparties.space/api\";\nexport function checkResponse(res) {\n  return res.ok ? res.json() : res.json().then(err => Promise.reject(err));\n}\n\n//делаю обертку вокруг fetch чтобы в разных запросах можно было использовать, url базовый статичный, меняется только endpoint в этом api\nexport function request(endpoint, options) {\n  return fetch(`${BASE_URL}${endpoint}`, options).then(checkResponse);\n}\n\n// async нужен когда несколько await поэтому убрал от сюда + а далее передаю рес, но его убрал т.к в стрелочной функции рес передается один и тотже в функицию\nexport const getEngredients = () => request(`/ingredients`, {});\nexport const sendOrder = createAsyncThunk(\"details/post\", async dataId => {\n  return request(`/orders`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      ingredients: dataId\n    })\n  });\n});\n\n//запрос на регистрацию\nexport const registerUser = createAsyncThunk(\"user/register\", async (userData, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  return request(`/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  }).then(res => {\n    if (res.success) {\n      localStorage.setItem(\"accessToken\", res.accessToken);\n      localStorage.setItem(\"refreshToken\", res.refreshToken);\n      return res;\n    } else {\n      return Promise.reject(\"Ошибка данных с сервера\");\n    }\n  }).finally(() => {\n    console.log(\"Ok\");\n  });\n});\n\n//запрос на авторизацию\nexport const loginUser = createAsyncThunk(\"user/login\", async (data, thunkApi) => {\n  return request(\"/auth/login\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: data.email,\n      password: data.password\n    })\n  }).then(res => {\n    if (res.success) {\n      localStorage.setItem(\"accessToken\", res.accessToken);\n      localStorage.setItem(\"refreshToken\", res.refreshToken);\n      return res;\n    } else {\n      return Promise.reject(\"Ошибка данных с сервера\");\n    }\n  }).catch(err => {\n    console.log(err);\n  }).finally(() => {\n    console.log(\"Ok\");\n  });\n});\n\n// запрос на получение токенов через рефреш токен\nconst refreshToken = () => {\n  return request(`/auth/token`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      token: localStorage.getItem(\"refreshToken\")\n    })\n  });\n};\nconst fetchWithRefresh = async (url, options) => {\n  try {\n    const res = await fetch(url, options);\n    return await checkResponse(res);\n  } catch (err) {\n    if (err.message === \"jwt expired\") {\n      console.log(err);\n      const refreshData = await refreshToken();\n      console.log(refreshData);\n      if (!refreshData.success) {\n        return Promise.reject(refreshData);\n      }\n      localStorage.setItem(\"accessToken\", refreshData.accessToken);\n      localStorage.setItem(\"refreshToken\", refreshData.refreshToken);\n      options.headers.authorization = refreshData.accessToken;\n      const res = await fetch(url, options);\n      return await checkResponse(res);\n    } else {\n      return Promise.reject(err);\n    }\n  }\n};\nexport const getUser = () => {\n  return dispatch => {\n    return fetchWithRefresh(`${BASE_URL}/auth/user`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: localStorage.getItem(\"accessToken\")\n      }\n    }).then(res => {\n      console.log(res);\n      if (res.success) {\n        dispatch(setUser(res.user));\n      } else {\n        return Promise.reject(\"Ошибка данных с сервера\");\n      }\n    });\n  };\n};\nexport const checkUserAuth = createAsyncThunk(\"user/auth\", async (_, _ref2) => {\n  let {\n    dispatch\n  } = _ref2;\n  if (localStorage.getItem(\"accessToken\")) {\n    dispatch(getUser()).catch(error => {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      dispatch(setUser(null));\n    }).finally(() => dispatch(setAuthChecked(true)));\n  } else {\n    dispatch(setAuthChecked(true));\n    dispatch(setUser(null));\n  }\n});\nexport const forgotPassword = createAsyncThunk(\"user/forgot\", async (email, _) => {\n  return request(`/password-reset`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n});\nexport const resetPassword = createAsyncThunk(\"user/reset\", async (data, _) => {\n  return request(`/password-reset/reset`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      data\n    })\n  });\n});\nexport const logoutUser = createAsyncThunk(\"user/logout\", async (_, _ref3) => {\n  let {\n    dispatch\n  } = _ref3;\n  return request(`/auth/logout`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      token: localStorage.getItem(\"refreshToken\")\n    })\n  }).then(() => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n  });\n});","map":{"version":3,"names":["createAsyncThunk","setAuthChecked","setUser","BASE_URL","checkResponse","res","ok","json","then","err","Promise","reject","request","endpoint","options","fetch","getEngredients","sendOrder","dataId","method","headers","body","JSON","stringify","ingredients","registerUser","userData","_ref","dispatch","success","localStorage","setItem","accessToken","refreshToken","finally","console","log","loginUser","data","thunkApi","Accept","email","password","catch","token","getItem","fetchWithRefresh","url","message","refreshData","authorization","getUser","user","checkUserAuth","_","_ref2","error","removeItem","forgotPassword","resetPassword","logoutUser","_ref3"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/utils/api.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { setAuthChecked, setUser } from \"../reportWebVitals\";\r\nimport { TForgotPassword, TLogin, TProfile, TResetPassword } from \"./types\";\r\n\r\nexport const BASE_URL = \"https://norma.nomoreparties.space/api\";\r\n\r\nexport function checkResponse(res: Response) {\r\n  return res.ok\r\n    ? res.json()\r\n    : res.json().then((err: Error) => Promise.reject(err));\r\n}\r\n\r\n//делаю обертку вокруг fetch чтобы в разных запросах можно было использовать, url базовый статичный, меняется только endpoint в этом api\r\nexport function request(endpoint: string, options: RequestInit | undefined) {\r\n  return fetch(`${BASE_URL}${endpoint}`, options).then(checkResponse);\r\n}\r\n\r\n// async нужен когда несколько await поэтому убрал от сюда + а далее передаю рес, но его убрал т.к в стрелочной функции рес передается один и тотже в функицию\r\nexport const getEngredients = () => request(`/ingredients`, {});\r\n\r\nexport const sendOrder = createAsyncThunk(\"details/post\",\r\nasync (dataId: string[]) => {\r\n  return request(`/orders`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      ingredients: dataId,\r\n    }),\r\n  });\r\n});\r\n\r\n//запрос на регистрацию\r\nexport const registerUser = createAsyncThunk(\r\n  \"user/register\",\r\n  async (userData: TProfile, { dispatch }) => {\r\n    return request(`/auth/register`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userData),\r\n    })\r\n      .then((res) => {\r\n        if (res.success) {\r\n          localStorage.setItem(\"accessToken\", res.accessToken);\r\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\r\n          return res;\r\n        } else {\r\n          return Promise.reject(\"Ошибка данных с сервера\");\r\n        }\r\n      })\r\n      .finally(() => {\r\n        console.log(\"Ok\");\r\n      });\r\n  }\r\n);\r\n\r\n//запрос на авторизацию\r\nexport const loginUser = createAsyncThunk(\r\n  \"user/login\",\r\n  async (data: TLogin, thunkApi) => {\r\n    return request(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: data.email,\r\n        password: data.password,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.success) {\r\n          localStorage.setItem(\"accessToken\", res.accessToken);\r\n          localStorage.setItem(\"refreshToken\", res.refreshToken);\r\n          return res;\r\n        } else {\r\n          return Promise.reject(\"Ошибка данных с сервера\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => {\r\n        console.log(\"Ok\");\r\n      });\r\n  }\r\n);\r\n\r\n// запрос на получение токенов через рефреш токен\r\nconst refreshToken = () => {\r\n  return request(`/auth/token`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      token: localStorage.getItem(\"refreshToken\"),\r\n    }),\r\n  });\r\n};\r\n\r\nconst fetchWithRefresh = async (url: string, options: any) => {\r\n  try {\r\n    const res = await fetch(url, options);\r\n    return await checkResponse(res);\r\n  } catch (err: any) {\r\n    if (err.message === \"jwt expired\") {\r\n      console.log(err);\r\n      const refreshData = await refreshToken();\r\n      console.log(refreshData);\r\n      if (!refreshData.success) {\r\n        return Promise.reject(refreshData);\r\n      }\r\n      localStorage.setItem(\"accessToken\", refreshData.accessToken);\r\n      localStorage.setItem(\"refreshToken\", refreshData.refreshToken);\r\n      options.headers.authorization = refreshData.accessToken;\r\n      const res = await fetch(url, options);\r\n      return await checkResponse(res);\r\n    } else {\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n};\r\n\r\nexport const getUser = () => {\r\n  return (dispatch: (arg0: { payload: any; type: \"user/setUser\" }) => void) => {\r\n    return fetchWithRefresh(`${BASE_URL}/auth/user`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: localStorage.getItem(\"accessToken\"),\r\n      },\r\n    }).then((res) => {\r\n      console.log(res);\r\n      if (res.success) {\r\n        dispatch(setUser(res.user));\r\n      } else {\r\n        return Promise.reject(\"Ошибка данных с сервера\");\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const checkUserAuth = createAsyncThunk(\r\n  \"user/auth\",\r\n  async (_, { dispatch }) => {\r\n    if (localStorage.getItem(\"accessToken\")) {\r\n      dispatch(getUser())\r\n        .catch((error) => {\r\n          localStorage.removeItem(\"accessToken\");\r\n          localStorage.removeItem(\"refreshToken\");\r\n          dispatch(setUser(null));\r\n        })\r\n        .finally(() => dispatch(setAuthChecked(true)));\r\n    } else {\r\n      dispatch(setAuthChecked(true));\r\n      dispatch(setUser(null));\r\n    }\r\n  }\r\n);\r\n\r\nexport const forgotPassword = createAsyncThunk(\r\n  \"user/forgot\",\r\n  async ( email: TForgotPassword, _) => {\r\n  return request(`/password-reset`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email }),\r\n  });\r\n});\r\n\r\n\r\nexport const resetPassword = createAsyncThunk(\r\n  \"user/reset\",\r\n  async ( data: TResetPassword, _) => {\r\n  return request(`/password-reset/reset`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ data }),\r\n  });\r\n});\r\n\r\nexport const logoutUser = createAsyncThunk(\r\n  \"user/logout\",\r\n  async (_, { dispatch }) => {\r\n    return request(`/auth/logout`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ token: localStorage.getItem(\"refreshToken\") }),\r\n    }).then(() => {\r\n      localStorage.removeItem(\"accessToken\");\r\n      localStorage.removeItem(\"refreshToken\");\r\n    });\r\n  }\r\n);\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}