{"ast":null,"code":"import { fetchIngredients } from \"./ingredientQuery\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  ingredients: [],\n  isLoding: false,\n  error: \" \"\n};\nconst burgerIngredientsSlice = createSlice({\n  name: \"ingredients\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Добавьте редукторы для дополнительных типов действий здесь\n    .addCase(fetchIngredients.pending.type, state => {\n      state.isLoding = true;\n      state.error = \" \";\n    }).addCase(fetchIngredients.fulfilled.type, (state, action) => {\n      state.isLoding = false;\n      state.error = \" \";\n      state.ingredients = action.payload.data;\n    }).addCase(fetchIngredients.rejected.type, (state, action) => {\n      state.isLoding = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default burgerIngredientsSlice.reducer;","map":{"version":3,"names":["fetchIngredients","createSlice","initialState","ingredients","isLoding","error","burgerIngredientsSlice","name","reducers","extraReducers","builder","addCase","pending","type","state","fulfilled","action","payload","data","rejected","reducer"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/services/store/reducers/burgerIngredientsSlice.tsx"],"sourcesContent":["import { RootState, TingredintsConstructor } from \"../../../utils/types\";\r\nimport { fetchIngredients } from \"./ingredientQuery\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\ntype Tinitial = {\r\n  ingredients: TingredintsConstructor[],\r\n  isLoding: boolean,\r\n  error: string,\r\n}\r\n\r\nexport const initialState:Tinitial = {\r\n  ingredients: [],\r\n  isLoding: false,\r\n  error: \" \",\r\n};\r\n\r\nconst burgerIngredientsSlice = createSlice({\r\n  name: \"ingredients\",\r\n  initialState,\r\n  reducers: {\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Добавьте редукторы для дополнительных типов действий здесь\r\n      .addCase(fetchIngredients.pending.type, (state) => {\r\n        state.isLoding = true;\r\n        state.error = \" \";\r\n      })\r\n      .addCase(fetchIngredients.fulfilled.type, (state, action:any) => {\r\n        state.isLoding = false;\r\n        state.error = \" \";\r\n        state.ingredients = action.payload.data;\r\n      })\r\n      .addCase(fetchIngredients.rejected.type, (state, action:any) => {\r\n        state.isLoding = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default burgerIngredientsSlice.reducer;\r\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAS9C,OAAO,MAAMC,YAAqB,GAAG;EACnCC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,sBAAsB,GAAGL,WAAW,CAAC;EACzCM,IAAI,EAAE,aAAa;EACnBL,YAAY;EACZM,QAAQ,EAAE,CACV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACX,gBAAgB,CAACY,OAAO,CAACC,IAAI,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACV,QAAQ,GAAG,IAAI;MACrBU,KAAK,CAACT,KAAK,GAAG,GAAG;IACnB,CAAC,CAAC,CACDM,OAAO,CAACX,gBAAgB,CAACe,SAAS,CAACF,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAU,KAAK;MAC/DF,KAAK,CAACV,QAAQ,GAAG,KAAK;MACtBU,KAAK,CAACT,KAAK,GAAG,GAAG;MACjBS,KAAK,CAACX,WAAW,GAAGa,MAAM,CAACC,OAAO,CAACC,IAAI;IACzC,CAAC,CAAC,CACDP,OAAO,CAACX,gBAAgB,CAACmB,QAAQ,CAACN,IAAI,EAAE,CAACC,KAAK,EAAEE,MAAU,KAAK;MAC9DF,KAAK,CAACV,QAAQ,GAAG,KAAK;MACtBU,KAAK,CAACT,KAAK,GAAGW,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeX,sBAAsB,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}