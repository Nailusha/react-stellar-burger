{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nailusha\\\\Desktop\\\\yandex-dev\\\\react-stellar-burger\\\\src\\\\components\\\\app\\\\app.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport AppHeader from \"../header/app-header/app-header\";\nimport AppMain from \"../main/app-main/app-main\";\nimport Modal from \"../modal/modal\";\nimport OrderDetails from \"../modal/order-details/order-details\";\nimport IngridientDetails from \"../modal/ingridient-details/ingridient-details\";\nimport Preloader from \"../preloder/preloder\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchIngridients } from \"../services/store/reducers/ingridientQuery\";\nimport { ingridientSelector } from \"../services/store/selector/ingridientSelector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const ingridients = useSelector(ingridientSelector);\n  const [isOpen, setIsOpen] = useState(false);\n  const isClickStatusIngridient = useSelector(state => state.ingridDetails.clickStutus);\n  const isClickStatusDetails = useSelector(state => state.orderDetails.clickStutus);\n  const dispatch = useDispatch();\n  const childForModal = () => {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      children: [isClickStatusDetails && /*#__PURE__*/_jsxDEV(OrderDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 34\n      }, this), isClickStatusIngridient && /*#__PURE__*/_jsxDEV(IngridientDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    dispatch(fetchIngridients()).then(() => {\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching ingredients:\", error);\n      setIsLoading(false); // Set loading to false even in case of an error\n    });\n  }, [dispatch]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  if (!ingridients || ingridients.length < 1) {\n    // Handle the case when ingridients is not available or empty\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isOpen && childForModal()]\n  }, void 0, true);\n};\n_s(App, \"Fmklr0yetMaIcEUATgMJBrDCliE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","AppHeader","AppMain","Modal","OrderDetails","IngridientDetails","Preloader","useDispatch","useSelector","fetchIngridients","ingridientSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isLoading","setIsLoading","ingridients","isOpen","setIsOpen","isClickStatusIngridient","state","ingridDetails","clickStutus","isClickStatusDetails","orderDetails","dispatch","childForModal","children","fileName","_jsxFileName","lineNumber","columnNumber","then","catch","error","console","length","_c","$RefreshReg$"],"sources":["C:/Users/Nailusha/Desktop/yandex-dev/react-stellar-burger/src/components/app/app.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport AppHeader from \"../header/app-header/app-header\";\r\nimport AppMain from \"../main/app-main/app-main\";\r\nimport Modal from \"../modal/modal\";\r\nimport OrderDetails from \"../modal/order-details/order-details\";\r\nimport IngridientDetails from \"../modal/ingridient-details/ingridient-details\";\r\n\r\nimport Preloader from \"../preloder/preloder\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchIngridients } from \"../services/store/reducers/ingridientQuery\";\r\nimport { ingridientSelector } from \"../services/store/selector/ingridientSelector\";\r\n\r\n\r\nconst App = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const ingridients = useSelector(ingridientSelector);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const isClickStatusIngridient = useSelector(\r\n    (state) => state.ingridDetails.clickStutus\r\n  );\r\n  const isClickStatusDetails = useSelector(\r\n    (state) => state.orderDetails.clickStutus\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const childForModal = () => {\r\n    return (\r\n      <Modal>\r\n        {isClickStatusDetails && <OrderDetails />}\r\n        {isClickStatusIngridient && <IngridientDetails />}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchIngridients())\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching ingredients:\", error);\r\n        setIsLoading(false); // Set loading to false even in case of an error\r\n      });\r\n  }, [dispatch]);\r\n\r\n  if (isLoading) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  if (!ingridients || ingridients.length < 1) {\r\n    // Handle the case when ingridients is not available or empty\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppHeader />\r\n      <AppMain />\r\n      {isOpen && childForModal()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,SAAS,MAAM,iCAAiC;AACvD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,iBAAiB,MAAM,gDAAgD;AAE9E,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,QAAQ,4CAA4C;AAC7E,SAASC,kBAAkB,QAAQ,+CAA+C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGnF,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMoB,WAAW,GAAGX,WAAW,CAACE,kBAAkB,CAAC;EACnD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMuB,uBAAuB,GAAGd,WAAW,CACxCe,KAAK,IAAKA,KAAK,CAACC,aAAa,CAACC,WAAW,CAC3C;EACD,MAAMC,oBAAoB,GAAGlB,WAAW,CACrCe,KAAK,IAAKA,KAAK,CAACI,YAAY,CAACF,WAAW,CAC1C;EAED,MAAMG,QAAQ,GAAGrB,WAAW,EAAE;EAE9B,MAAMsB,aAAa,GAAGA,CAAA,KAAM;IAC1B,oBACEjB,OAAA,CAACT,KAAK;MAAA2B,QAAA,GACHJ,oBAAoB,iBAAId,OAAA,CAACR,YAAY;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EACxCZ,uBAAuB,iBAAIV,OAAA,CAACP,iBAAiB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3C;EAEZ,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACd4B,QAAQ,CAACnB,gBAAgB,EAAE,CAAC,CACzB0B,IAAI,CAAC,MAAM;MACVjB,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDkB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDnB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,CAACU,QAAQ,CAAC,CAAC;EAEd,IAAIX,SAAS,EAAE;IACb,oBAAOL,OAAA,CAACN,SAAS;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EACtB;EAEA,IAAI,CAACf,WAAW,IAAIA,WAAW,CAACoB,MAAM,GAAG,CAAC,EAAE;IAC1C;IACA,OAAO,IAAI;EACb;EAEA,oBACE3B,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA,CAACX,SAAS;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACbtB,OAAA,CAACV,OAAO;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EACVd,MAAM,IAAIS,aAAa,EAAE;EAAA,gBACzB;AAEP,CAAC;AAACb,EAAA,CAjDID,GAAG;EAAA,QAEaP,WAAW,EAECA,WAAW,EAGdA,WAAW,EAIvBD,WAAW;AAAA;AAAAiC,EAAA,GAXxBzB,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}